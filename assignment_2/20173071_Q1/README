

*************** Q1: Implement a Generic AVL Tree ***************

The AIM is to have end to end knowledge of the balanced binary search tree and how it can be used to solve a wide range of problems efficiently.

Operations to be supported by the AVL Tree:
-------------------------------------------
1. Insertion
2. Deletion
3. Search
4. Count occurrences of element
5. lower_bound
6. upper_bound
7. Closest element to some value.
8. K-th largest element
9. Count the number of elements in the tree whose values fall into a given range.

Constraints:
------------
- All the operations above should have a complexity of O(log N).
- Duplicates are allowed (In general AVL tree don't have duplicates, however in this task you need to handle it).
- For strings, you can simply compare them but for Class data type, you have to pass the comparator object so that you can compare two objects.

References:
-----------
https://en.wikipedia.org/wiki/AVL_tree


<<<<<<<<<<<<<<<<<<<<<<<<<<<<< Testing AVL Tree for Integers <<<<<<<<<<<<<<<<<<<<<<<<<<<<<


└──20[2]
    ├──10[1]
    │   ├──5[1]
    │   └──15[2]
    │       ├──12[1]
    └──55[1]
        ├──40[1]
        │   ├──32[2]
        └──65[2]
            ├──60[3]
            └──75[1]

Deleting 55 ...

└──20[2]
    ├──10[1]
    │   ├──5[1]
    │   └──15[2]
    │       ├──12[1]
    └──60[3]
        ├──40[1]
        │   ├──32[2]
        └──65[2]
            └──75[1]

Deleting 40 ...

└──20[2]
    ├──10[1]
    │   ├──5[1]
    │   └──15[2]
    │       ├──12[1]
    └──60[3]
        ├──32[2]
        └──65[2]
            └──75[1]

Deleting 20 ...

└──20[1]
    ├──10[1]
    │   ├──5[1]
    │   └──15[2]
    │       ├──12[1]
    └──60[3]
        ├──32[2]
        └──65[2]
            └──75[1]
5 10 12 15 15 20 32 32 60 60 60 65 65 75 
SEARCH(12): = FOUND
OCCURANCES(60) = 3
LOWER-BOUND(60) = 60
UPPER-BOUND(60) = 65
Kth-LARGEST-ELEMENT(2) = 65
Kth-LARGEST-ELEMENT(3) = 65
Kth-LARGEST-ELEMENT(4) = 60
Kth-LARGEST-ELEMENT(5) = 60
CLOSEST-ELEMENT(30) = 32
CLOSEST-ELEMENT(15) = 15
CLOSEST-ELEMENT(62) = 60
CLOSEST-ELEMENT(63) = 65
CLOSEST-ELEMENT(4) = 5
CLOSEST-ELEMENT(80) = 75
COUNT-ELEMENTS-IN-RANGE[15,60] = 8


<<<<<<<<<<<<<<<<<<<<<<<<<<<<< Testing AVL Tree for Strings <<<<<<<<<<<<<<<<<<<<<<<<<<<<<


└──e{-1,3,1}
    ├──c{0,1,1}
    │   ├──b{0,0,1}
    │   └──d{0,0,1}
    └──g{-1,2,1}
        ├──f{0,0,1}
        └──i{0,1,1}
            ├──h{0,0,1}
            └──p{0,0,1}

Deleting e ...

└──f{-1,3,1}
    ├──c{0,1,1}
    │   ├──b{0,0,1}
    │   └──d{0,0,1}
    └──g{-2,2,1}
        └──i{0,1,1}
            ├──h{0,0,1}
            └──p{0,0,1}

Deleting f ...

└──g{0,2,1}
    ├──c{0,1,1}
    │   ├──b{0,0,1}
    │   └──d{0,0,1}
    └──i{0,1,1}
        ├──h{0,0,1}
        └──p{0,0,1}

Adding some additional nodes ...

└──g{1,3,1}
    ├──c{-1,2,2}
    │   ├──b{0,0,2}
    │   └──e{0,1,2}
    │       ├──d{0,0,2}
    │       └──f{0,0,1}
    └──i{0,1,1}
        ├──h{0,0,1}
        └──p{0,0,3}
SEARCH(a): = NOT FOUND
SEARCH(f): = FOUND
SEARCH(z): = NOT FOUND
OCCURANCES(a): = Node with key:a NOT FOUND !!!
0
OCCURANCES(f): = 1
LOWER-BOUND(b) = b
UPPER-BOUND(e) = f
LOWER-BOUND(i) = i
UPPER-BOUND(f) = g
Kth-LARGEST-ELEMENT(2) = p
Kth-LARGEST-ELEMENT(3) = p
Kth-LARGEST-ELEMENT(4) = i
Kth-LARGEST-ELEMENT(5) = h
CLOSEST-ELEMENT(a) = b
CLOSEST-ELEMENT(z) = p
CLOSEST-ELEMENT(k) = i
CLOSEST-ELEMENT(o) = i
COUNT-ELEMENTS-IN-RANGE[b,g] = 10


<<<<<<<<<<<<<<<<<<<<<<<<<<<<< Testing AVL Tree for Class Objects <<<<<<<<<<<<<<<<<<<<<<<<<<<<<


└──g[1]
    ├──c[2]
    │   ├──b[2]
    │   └──e[2]
    │       ├──d[2]
    │       └──f[1]
    └──i[1]
        ├──h[1]
        └──p[3]

Deleting Aditya ...

└──1070:Rama:B.Ed:rama@gmail.com[1]
    ├──1030:Chandrashekhar:M.S.C:chandu@gmail.com[2]
    │   ├──1010:Laasya:M.Pharm:laasya@gmail.com[3]
    │   │   ├──1000:Aditya:C.S.E:aditya@gmail.com[2]
    │   │   └──1020:Anusha:M.Pharm:anusha@gmail.com[1]
    │   └──1050:Suraj:C.S.E:suraj@gmail.com[1]
    │       ├──1040:Aruna:M.C.A:aruna@gmail.com[2]
    │       └──1060:Sharanya:F.tech:tubli@gmail.com[2]
    └──1090:Kameshwar:B.Com:chacha@gmail.com[1]
        ├──1080:Kamalakar:B.Com:kambu@gmail.com[1]
        └──1100:Vijaya:B.Ed:chachi@gmail.com[1]
            └──1200:Lahari:E.C.E:lahari@gmail.com[2]

Deleting Rama ...

└──1080:Kamalakar:B.Com:kambu@gmail.com[1]
    ├──1030:Chandrashekhar:M.S.C:chandu@gmail.com[2]
    │   ├──1010:Laasya:M.Pharm:laasya@gmail.com[3]
    │   │   ├──1000:Aditya:C.S.E:aditya@gmail.com[2]
    │   │   └──1020:Anusha:M.Pharm:anusha@gmail.com[1]
    │   └──1050:Suraj:C.S.E:suraj@gmail.com[1]
    │       ├──1040:Aruna:M.C.A:aruna@gmail.com[2]
    │       └──1060:Sharanya:F.tech:tubli@gmail.com[2]
    └──1090:Kameshwar:B.Com:chacha@gmail.com[1]
        └──1100:Vijaya:B.Ed:chachi@gmail.com[1]
            └──1200:Lahari:E.C.E:lahari@gmail.com[2]

Deleting Anusha ...

└──1080:Kamalakar:B.Com:kambu@gmail.com[1]
    ├──1030:Chandrashekhar:M.S.C:chandu@gmail.com[2]
    │   ├──1010:Laasya:M.Pharm:laasya@gmail.com[3]
    │   │   ├──1000:Aditya:C.S.E:aditya@gmail.com[2]
    │   │   └──1020:Anusha:M.Pharm:anusha@gmail.com[1]
    │   └──1060:Sharanya:F.tech:tubli@gmail.com[2]
    │       ├──1040:Aruna:M.C.A:aruna@gmail.com[2]
    └──1090:Kameshwar:B.Com:chacha@gmail.com[1]
        └──1100:Vijaya:B.Ed:chachi@gmail.com[1]
            └──1200:Lahari:E.C.E:lahari@gmail.com[2]
SEARCH(1010:Laasya:M.Pharm:laasya@gmail.com): = FOUND
SEARCH(2000:Kumar:E.C.E:kumar@gmail.com): = NOT FOUND
OCCURANCES(Laasya) = 3
LOWER-BOUND(1000:Aditya:C.S.E:aditya@gmail.com) = 1000:Aditya:C.S.E:aditya@gmail.com
UPPER-BOUND(1000:Aditya:C.S.E:aditya@gmail.com) = 1010:Laasya:M.Pharm:laasya@gmail.com
LOWER-BOUND(1040:Aruna:M.C.A:aruna@gmail.com) = 1040:Aruna:M.C.A:aruna@gmail.com
UPPER-BOUND(1040:Aruna:M.C.A:aruna@gmail.com) = 1060:Sharanya:F.tech:tubli@gmail.com
Kth-LARGEST-ELEMENT(2) = 1200:Lahari:E.C.E:lahari@gmail.com
Kth-LARGEST-ELEMENT(3) = 1100:Vijaya:B.Ed:chachi@gmail.com
Kth-LARGEST-ELEMENT(4) = 1090:Kameshwar:B.Com:chacha@gmail.com
Kth-LARGEST-ELEMENT(5) = 1080:Kamalakar:B.Com:kambu@gmail.com
CLOSEST-ELEMENT(1000:Aditya:C.S.E:aditya@gmail.com) = 1000:Aditya:C.S.E:aditya@gmail.com
CLOSEST-ELEMENT(1040:Aruna:M.C.A:aruna@gmail.com) = 1040:Aruna:M.C.A:aruna@gmail.com
CLOSEST-ELEMENT(2000:Kumar:E.C.E:kumar@gmail.com) = 1200:Lahari:E.C.E:lahari@gmail.com
CLOSEST-ELEMENT(1000:Veeramani:E.C.E:veeru@gmail.com) = 1000:Aditya:C.S.E:aditya@gmail.com
CLOSEST-ELEMENT(1028:Prabhat:E.C.E:prabhat@gmail.com) = 1030:Chandrashekhar:M.S.C:chandu@gmail.com
CLOSEST-ELEMENT(1022:Vinod:E.C.E:vinod@gmail.com) = 1020:Anusha:M.Pharm:anusha@gmail.com
COUNT-ELEMENTS-IN-RANGE[Chandrashekhar,Vijaya] = 9
